# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import env_manager_pb2 as env__manager__pb2


class EnvManageRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
            "/manager.EnvManageRPC/Check",
            request_serializer=env__manager__pb2.Request.SerializeToString,
            response_deserializer=env__manager__pb2.Reply.FromString,
        )
        self.CreateEnv = channel.unary_unary(
            "/manager.EnvManageRPC/CreateEnv",
            request_serializer=env__manager__pb2.EnvSchema.SerializeToString,
            response_deserializer=env__manager__pb2.CreateReply.FromString,
        )
        self.ResetEnv = channel.stream_stream(
            "/manager.EnvManageRPC/ResetEnv",
            request_serializer=env__manager__pb2.ResetRequest.SerializeToString,
            response_deserializer=env__manager__pb2.EnvReply.FromString,
        )
        self.StepEnv = channel.stream_stream(
            "/manager.EnvManageRPC/StepEnv",
            request_serializer=env__manager__pb2.AgentDecision.SerializeToString,
            response_deserializer=env__manager__pb2.EnvReply.FromString,
        )
        self.CloseEnv = channel.unary_unary(
            "/manager.EnvManageRPC/CloseEnv",
            request_serializer=env__manager__pb2.Request.SerializeToString,
            response_deserializer=env__manager__pb2.CloseReply.FromString,
        )


class EnvManageRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResetEnv(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StepEnv(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CloseEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EnvManageRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Check": grpc.unary_unary_rpc_method_handler(
            servicer.Check,
            request_deserializer=env__manager__pb2.Request.FromString,
            response_serializer=env__manager__pb2.Reply.SerializeToString,
        ),
        "CreateEnv": grpc.unary_unary_rpc_method_handler(
            servicer.CreateEnv,
            request_deserializer=env__manager__pb2.EnvSchema.FromString,
            response_serializer=env__manager__pb2.CreateReply.SerializeToString,
        ),
        "ResetEnv": grpc.stream_stream_rpc_method_handler(
            servicer.ResetEnv,
            request_deserializer=env__manager__pb2.ResetRequest.FromString,
            response_serializer=env__manager__pb2.EnvReply.SerializeToString,
        ),
        "StepEnv": grpc.stream_stream_rpc_method_handler(
            servicer.StepEnv,
            request_deserializer=env__manager__pb2.AgentDecision.FromString,
            response_serializer=env__manager__pb2.EnvReply.SerializeToString,
        ),
        "CloseEnv": grpc.unary_unary_rpc_method_handler(
            servicer.CloseEnv,
            request_deserializer=env__manager__pb2.Request.FromString,
            response_serializer=env__manager__pb2.CloseReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "manager.EnvManageRPC", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EnvManageRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Check(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/manager.EnvManageRPC/Check",
            env__manager__pb2.Request.SerializeToString,
            env__manager__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CreateEnv(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/manager.EnvManageRPC/CreateEnv",
            env__manager__pb2.EnvSchema.SerializeToString,
            env__manager__pb2.CreateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResetEnv(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/manager.EnvManageRPC/ResetEnv",
            env__manager__pb2.ResetRequest.SerializeToString,
            env__manager__pb2.EnvReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StepEnv(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/manager.EnvManageRPC/StepEnv",
            env__manager__pb2.AgentDecision.SerializeToString,
            env__manager__pb2.EnvReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CloseEnv(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/manager.EnvManageRPC/CloseEnv",
            env__manager__pb2.Request.SerializeToString,
            env__manager__pb2.CloseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class DataBufferStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Request = channel.unary_unary(
            "/manager.DataBuffer/Request",
            request_serializer=env__manager__pb2.BlockDescription.SerializeToString,
            response_deserializer=env__manager__pb2.BlockReply.FromString,
        )
        self.Step = channel.stream_unary(
            "/manager.DataBuffer/Step",
            request_serializer=env__manager__pb2.AgentDecision.SerializeToString,
            response_deserializer=env__manager__pb2.Reply.FromString,
        )


class DataBufferServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Step(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DataBufferServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Request": grpc.unary_unary_rpc_method_handler(
            servicer.Request,
            request_deserializer=env__manager__pb2.BlockDescription.FromString,
            response_serializer=env__manager__pb2.BlockReply.SerializeToString,
        ),
        "Step": grpc.stream_unary_rpc_method_handler(
            servicer.Step,
            request_deserializer=env__manager__pb2.AgentDecision.FromString,
            response_serializer=env__manager__pb2.Reply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "manager.DataBuffer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DataBuffer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Request(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/manager.DataBuffer/Request",
            env__manager__pb2.BlockDescription.SerializeToString,
            env__manager__pb2.BlockReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Step(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/manager.DataBuffer/Step",
            env__manager__pb2.AgentDecision.SerializeToString,
            env__manager__pb2.Reply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
